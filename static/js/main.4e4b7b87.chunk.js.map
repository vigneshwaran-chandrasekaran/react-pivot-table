{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Pivot1","headers","data","addedVisibleKey","map","item","visible","strategyObj","_","groupBy","setSubStrategyArray","Object","keys","key","items","roundUp","value","Math","round","fieldValue","val","className","abs","absolute","toLocaleString","flatternArray","oldArray","clonedArray","pop","Array","prototype","concat","apply","findtotal","group","reduce","acc","hasOwnProperty","forEach","push","visibleOuter","App","useState","state","setState","displayName","strategy","stI","onClick","length","random","handleOuterBtnClick","subStrategy","subIndex","row","handleBtnClick","security","secIndex","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e4b7b87.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport _ from 'lodash';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/style.scss';\nimport jsonData from './assets/data.json';\n\nconst { headers, data } = jsonData.Pivot1;\n\n// console.log({ data });\n\n/**\n * added extra 'visible' key to all object for hide and show\n */\nconst addedVisibleKey = data.map(item => ({ visible: false, ...item }));\n\n/**\n * group 'addedVisibleKey' by 'Strategy' key\n */\nconst strategyObj = _.groupBy(addedVisibleKey, item => item['Strategy']);\n\n/**\n * convert grouped Strategy object into Strategy array\n */\nconst strategyArray = Object.keys(strategyObj).map(key => strategyObj[key]);\n\n/**\n * group 'strategyArray' by 'Sub Strategy' key\n */\nconst subStrategy = strategyArray.map(item =>\n\t_.groupBy(item, item => item['Sub Strategy'])\n);\n\n/**\n * convert grouped 'subStrategy' object into array\n */\nlet setSubStrategyArray = subStrategy.map(items =>\n\tObject.keys(items).map(key => items[key])\n);\n\n/**\n * added extra 'visibleOuter' key for outer row array object\n */\nsetSubStrategyArray.forEach(items => {\n\titems.push([{ visibleOuter: false }]);\n});\n\nfunction absolute(value) {\n\treturn Math.abs(value);\n}\n\nfunction roundUp(value) {\n\treturn Math.round(value);\n}\n\nfunction fieldValue(value) {\n\tlet val = roundUp(value);\n\tif (val < 0) {\n\t\treturn (\n\t\t\t<span className=\"text-danger\">({absolute(val).toLocaleString()})</span>\n\t\t);\n\t}\n\treturn val.toLocaleString();\n}\n\nfunction flatternArray(oldArray) {\n\tlet clonedArray = [...oldArray];\n\tclonedArray.pop();\n\treturn Array.prototype.concat.apply([], clonedArray);\n}\n\nfunction findtotal(group, key) {\n\treturn group.reduce((acc, val) => {\n\t\tif (val.hasOwnProperty(key)) {\n\t\t\treturn acc + roundUp(val[key]);\n\t\t} else {\n\t\t\treturn acc;\n\t\t}\n\t}, 0);\n}\n\nfunction App() {\n\tconst [state, setState] = useState(0);\n\n\tfunction handleBtnClick(subStrategy) {\n\t\tsubStrategy.forEach(row => {\n\t\t\trow.visible = !row.visible;\n\t\t});\n\t\tsetState(Math.random());\n\t}\n\n\tfunction handleOuterBtnClick(strategy) {\n\t\tstrategy[strategy.length - 1].visibleOuter = !strategy[strategy.length - 1]\n\t\t\t.visibleOuter;\n\t\tsetState(Math.random());\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<table className=\"table table-bordered table-hover table-sm\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th className={state}>&nbsp;</th>\n\t\t\t\t\t\t{headers.map(({ displayName }) => (\n\t\t\t\t\t\t\t<th className=\"text-center\" key={displayName}>\n\t\t\t\t\t\t\t\t{displayName}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{setSubStrategyArray.map((strategy, stI) => (\n\t\t\t\t\t\t<Fragment key={`${stI}-strategy`}>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleOuterBtnClick(strategy)}\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn-sqr\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{strategy[strategy.length - 1].visibleOuter ? '-' : '+'}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<span className=\"pl-2\">{strategy[0][0]['Strategy']}</span>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>{fieldValue(findtotal(flatternArray(strategy), 'MV'))}</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(flatternArray(strategy), 'Carry'))}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(flatternArray(strategy), 'Net PL 1'))}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(flatternArray(strategy), 'Net PL 2'))}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(flatternArray(strategy), 'Net PL 3'))}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t{strategy.map((subStrategy, subIndex) => (\n\t\t\t\t\t\t\t\t<Fragment key={`${subIndex}-subStrategy`}>\n\t\t\t\t\t\t\t\t\t{strategy.length - 1 > subIndex ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\t\tstrategy[strategy.length - 1].visibleOuter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 'd-none'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"pl-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleBtnClick(subStrategy)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn-sqr\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{subStrategy[0]['visible'] ? '-' : '+'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"pl-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{subStrategy[0]['Sub Strategy']}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{fieldValue(findtotal(subStrategy, 'MV'))}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{fieldValue(findtotal(subStrategy, 'Carry'))}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(subStrategy, 'Net PL 1'))}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(subStrategy, 'Net PL 2'))}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{fieldValue(findtotal(subStrategy, 'Net PL 3'))}\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t{subStrategy.map((security, secIndex) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`${secIndex}-security`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsecurity.visible &&\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstrategy[strategy.length - 1].visibleOuter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 'd-none'\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"pl-5\">{security['Security']}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{security['MV']}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{fieldValue(security['Carry'])}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{fieldValue(security['Net PL 1'])}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{fieldValue(security['Net PL 2'])}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{fieldValue(security['Net PL 3'])}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t\t<tfoot>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th className=\"text-left\">Grand Total</th>\n\t\t\t\t\t\t<th>{fieldValue(findtotal(data, 'MV'))}</th>\n\t\t\t\t\t\t<th>{fieldValue(findtotal(data, 'Carry'))}</th>\n\t\t\t\t\t\t<th>{fieldValue(findtotal(data, 'Net PL 1'))}</th>\n\t\t\t\t\t\t<th>{fieldValue(findtotal(data, 'Net PL 2'))}</th>\n\t\t\t\t\t\t<th>{fieldValue(findtotal(data, 'Net PL 3'))}</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</tfoot>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}